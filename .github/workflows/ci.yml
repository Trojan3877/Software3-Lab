name: Build-Test-Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
    # ──────────────────────────────────────────────
    # 1. Checkout repo
    # ──────────────────────────────────────────────
    - name: 📥 Checkout
      uses: actions/checkout@v3

    # ──────────────────────────────────────────────
    # 2. Set up Python
    # ──────────────────────────────────────────────
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    # ──────────────────────────────────────────────
    # 3. Install system deps (Rust, build-essential, OpenJDK for future use)
    # ──────────────────────────────────────────────
    - name: 🛠️ Apt dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y build-essential openjdk-17-jre-headless

    # ──────────────────────────────────────────────
    # 4. Install Rust
    # ──────────────────────────────────────────────
    - name: ⚙️ Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    # ──────────────────────────────────────────────
    # 5. Build Rust tokenizer as Python wheel
    # ──────────────────────────────────────────────
    - name: 🦀 Build Rust tokenizer (maturin)
      run: |
        pip install maturin
        (cd rust/tokenizer && maturin build --release --interpreter python)

    # ──────────────────────────────────────────────
    # 6. Compile C++ vector library
    # ──────────────────────────────────────────────
    - name: ⚡ Compile C++ libvector.so
      run: |
        g++ -O3 -shared -std=c++17 -fPIC cpp/vector_math.cpp -o cpp/libvector.so

    # ──────────────────────────────────────────────
    # 7. Install Python dependencies
    # ──────────────────────────────────────────────
    - name: 📦 Install Python deps
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest nltk rouge-score openai

    # ──────────────────────────────────────────────
    # 8. Run tests with coverage
    # ──────────────────────────────────────────────
    - name: 🧪 Test & coverage
      run: |
        coverage run -m pytest -q
        coverage xml -o coverage.xml

    # ──────────────────────────────────────────────
    # 9. Upload to Codecov
    # ──────────────────────────────────────────────
    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage.xml
        verbose: true
